version: '2'

# 创建mysql/redis/bundle的数据卷
volumes:
  mysql-data: {}
  bundle-data: {}

services:
  web:
    # 指定构建目录
    build: .
    # 指定环境变量文件
    env_file:
      - .env
    command: bash -c "rm -fR tmp/pids/* ; bundle exec unicorn -p 3000 -c config/unicorn.rb -E production"
    # bundle exec unicorn -p 3000 -c config/unicorn.rb -E production"
    # 映射项目文件目录，实现容器外的项目文件编辑开发
    # 映射bundle的数据卷，重新build容器时不用重新下载所有Gem
    volumes:
      - .:/usr/app/web
      - /tmp/sockets
      - bundle-data:/usr/app/bundle
    # 将容器的端口映射到宿主机
    ports:
      - 3000:3000
    # 连接指定其他容器，用于在Rails的配置文件中指定数据库容器的Host
    links:
      - db:db
    # 容器间的依赖关系，Docker会根据依赖关系，顺序启动容器
    depends_on:
      - db

  db:
    image: mysql:5.7
    # 将mysql的数据挂载到数据卷上，防止数据丢失
    volumes:
      - mysql-data:/var/lib/mysql
    env_file:
      - .env
    # 将mysql的端口隐射到宿主机，用于客户端连接管理
    ports:
      - 3306:3306
    command: ['mysqld', '--character-set-server=utf8']

  nginx:
    restart: always
    build: ./nginx/
    ports:
      - "80:80"
    volumes_from:
      - web
    volumes:
      - ./nginx/log:/var/log/nginx
      - ./nginx/sites:/etc/nginx/conf.d
    links:
      - web:web
    depends_on:
      - web
      - go_app

  # golang app part. It depends on the rails_app to initialize the database
  go_app:
    build: ./go_app
    volumes:
      - ./go_app:/root
    command: realize start
    environment:
      # Gin webserver run mode. Or "debug" for debugging
      - GIN_MODE=release
    ports:
      - "4000:4000"
    depends_on:
      - db